#Var ComputerActions {
Autopilot engaged.^
 #If {@SpeakWhenPossible=1} {
  #GagLine 1 Voice;
  msplay Ship\Move\AutopilotEngaged~@Ext
 }
|
Autopilot disengaged.^
 #If {@SpeakWhenPossible=1} {
  #GagLine 1 Voice;
  msplay Ship\Move\AutopilotDisengaged~@Ext
 }
|
Self-destruct sequence initiated. Destruction in sixty seconds.^
 msplay Ship\Computer\Self-Distruct~@Ext;
 msplay Ship\Computer\SelfDestructStart@Ext
|
Self-destruct in thirty seconds.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructThirty~@Ext
|
Self-destruct in ten seconds.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructTen~@Ext
|
Five.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructFive~@Ext
|
Four.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructFour~@Ext
|
Three.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructThree~@Ext
|
Two.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructTwo~@Ext
|
One.^
 #GagLine 1 Voice;
 msplay Ship\Computer\SelfDestructOne~@Ext
|
Goodbye.^msplay Ship\Computer\SelfDestructEnd~@Ext
|
Warning! Aquatic life form has entered scooper chamber. Expulsion in progress...^msplay Atmo/fishscoop~@Ext
|
The destination specified is beyond the range of the wormhole drive.  Attempting to utilize jumpgate network.^
 msplay Ship\Computer\JumpgateCalculate~@Ext;
 ExpPipe {~@ComputerSaid} {~@ComputerSaid} {:Voice:~@ComputerSaid}
|
Scans reveal the debris to be a life form.^
 msplay Ship\Misc\SalvageLifeForm~@Ext;
 ExpPipe {~@ComputerSaid} {~@ComputerSaid} {Lifeform salvaged!}
|
Docking complete.^msplay Ship\Misc\DockingBayDoorClose~@Ext
|
Sensors detect an obstacle in the path of the wormhole. Aborting FTL travel...^
 #If {@SpeakWhenPossible=1} {
  msplay Ship\Move\PathBlocked~@Ext
 }
|
There is insufficient weapons-grade bardenium available for firing.^
 msplay Ship\Combat\NoBard~@Ext;
 #If {~%Defined(CannonsAvailableBard)=1} {#Var CannonsAvailableBard 0};
 ExpPipe {~@ComputerSaid} {There is insufficient bardenium available for firing.} {Insufficient bardenium available.}
|
The cannons now have sufficient ammunition for firing.^
 #If {~%Defined(CannonsAvailable)=1} {
  #Math CannonsAvailableBard {~@CannonsAvailable*10};
  #If {~@CannonsAvailableBard<20} {#Var CannonsAvailableBard 20}
 };
 ExpPipe {~@ComputerSaid} {Cannons reloaded.} {Reloaded.}
|
The target has moved from the locked coordinates.^
 msplay Ship\Combat\Lostlock~@Ext;
 ExpPipe {~@ComputerSaid} {~@ComputerSaid} {:Voice:Target has moved.}
|
Precision wormhole drive is powering up. Calculating optimal path for precision entry...^msplay Ship\Move\PreciseFTL~@Ext
|
The starship has entered an H II region. Caution is advised.^msplay Ship\Computer\Nebula~@Ext
|
NAVI was unable to continue due to sensor interference.^msplay Ship\Computer\Anomaly~@Ext
|
NAVI program has been interrupted. Autopilot is unable to continue.^msplay Ship/Computer/Error~@Ext
|
Warning, avian lifeform in processing chamber. Expelling...^
 msplay Ship\Misc\SalvageLifeForm~@Ext;
 mrandomplay ACV\AvianExpulsion*38~@Ext;
 ExpPipe {~@ComputerSaid} {Expelling avian lifeform from processing chamber.} {}
|
Cargo capacity has been filled. Shutting down atmospheric scooper.^ExpPipe {~@ComputerSaid} {Cargo capacity has been filled.} {Shutting down atmospheric scooper.}
|
The target is no longer available. Probable cause for lost sensor contact is destruction.^
 #Math DirectHits {~@DirectHits+1};
 #Math DestroyedShips {~@DestroyedShips+1};
 #Math TotalShips {~@TotalShips+1};
 msplay Ship\Combat\OtherDestroyed*11~@Ext
|
There is no target at those coordinates. Aborting.^msplay General\Misc\Cancel~@Ext
|
Warning, projectile approaching on automatically guided vector. Brace for impact.^mwplay Ship\Combat\Projectile*3~@Ext
|
Combat drone launch failed. NO valid targets detected.^msplay Ship\Computer\Error~@Ext
|
Activate.^msplay Ship\Move\QVAActivate~@Ext
|
Establishing computer link with a quantum vacuum accelerator...^msplay Ship\Move\QVAEstablish~@Ext -40
|
Link established. Proceeding with stage one checklist...^msplay Ship\Move\PreciseFTL~@Ext
|
Safety check complete. Telemetry handshake complete. Wormhole drive interlink confirmed. System sanity checks complete. Checklist confirmed green.^msplay Ship\Move\QVAFinalise~@Ext
|
Aborting repair task. Please stand by.^msplay Ship\Computer\Abort~@Ext
}

#Var ComputerActionsW {
Intruder alert! *^msplay Ship\Combat\Intruder~@Ext
|
Long-Range Laser * is locking onto *.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 #If {~@UseAlternativeCombatSounds=1 AND ~%Pos(Praelor,~@Wildcard2)>0} {
  msplay Ship\Combat\FireAtPraelor~@Ext
 };
 #If {~%Replace(~@Wildcard2,~~",)="empty space"} {
  msplay General\Misc\Cancel~@Ext;
  ExpPipe {~@ComputerSaid} {Turret@Wildcard1 locking on nothing} {Nothing targeted.}
 } {
  #If {~@ExtraFiringSound=1 and ~@Wildcard2<>"Debris"} {msplay Ship\Combat\WeaponsLocked~@Ext};
  msplay Ship\Computer\Keyboard*15~@Ext
 }
|
Via synchronized text message broadcasts, *^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 msplay Ship\Comm\STMB~@Ext;
 #Var ExpPipe {[Synchronized Text Message Broadcast] ~@WildCard1};
 PushMessage Comm {~@ComputerSaid}
|
* indicates that it*s under attack.^msplay Ship\Combat\UnderAttack@Ext
|
Warning, power level has dropped to *~%.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 #If {~%IsNumber(~@WildCard1)=1 AND ~@WildCard1>5} {
  msplay Atmo\SalvageLow@Ext
 } {
  msplay Atmo\SalvageCritical@Ext
 }
|
Scans reveal the debris to be a lifeform*.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 msplay Ship\Misc\Lifeform~@Ext;
 #If {~%Length(~@Wildcard1)=0} {
  ExpPipe {~@ComputerSaid} {~@ComputerSaid} {Lifeform salvaged!}
 } {
  ExpPipe {~@ComputerSaid} {~@ComputerSaid} {Salvaged a lifeform~@Wildcard1}
 }
|
Mission objective has been completed in approximately *. Return to base.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 msplay Music\*30~@Ext;
 #If {~@UseHitCounter=1} {
  #Var DirectHits {~%If(~%IsNumber(~@DirectHits)=0,0,~@DirectHits)};
  #Var PartialHits {~%If(~%IsNumber(~@PartialHits)=0,0,~@PartialHits)};
  #Var DestroyedShips {~%If(~%IsNumber(~@DestroyedShips)=0,0,~@DestroyedShips)};
  #Var TotalShips {~%If(~%IsNumber(~@TotalShips)=0,0,~@TotalShips)};
  #Var DestroyedDebris {~%If(~%IsNumber(~@DestroyedDebris)=0,0,~@DestroyedDebris)};
  #If {~@DirectHits=0 AND ~@PartialHits=0} {
   #Var ExpString {No hits on ~@TotalShips ships}
  } {
   #Math TotalHits {~@DirectHits + ~@PartialHits};
   #Var ExpString {~%Replace(~@HitCounterFormatString,$TOTALHITS,~@TotalHits)};
   #Var ExpString {~%Replace(~@ExpString,$DIRECTHITS,~@DirectHits)};
   #Var ExpString {~%Replace(~@ExpString,$PARTIALHITS,~@PartialHits)};
   #Var ExpString {~%replace(~@ExpString,$DESTROYEDSHIPS,~@DestroyedShips)};
   #Var ExpString {~%Replace(~@ExpString,$TOTALSHIPS,~@TotalShips)};
   #Var ExpString {~%Replace(~@ExpString,$DESTROYEDDEBRIS,~@DestroyedDebris)}
  };
  #Var ExpString {~@ExpString in ~@Wildcard1.};
  PushMessage Mission0Reports {~@ExpString}
 }
|
* destroyed.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 #If {~@Wildcard1="Debris"} {
  #Math DestroyedDebris {~@DestroyedDebris + 1};
  mwplay Ship\Combat\DebrisDestroyed@Ext
 } {
  #Math DirectHits {~@DirectHits + 1};
  #Math DestroyedShips {~@DestroyedShips + 1};
  #Math TotalShips {~@TotalShips + 1};
  msplay Ship\Combat\OtherDestroyed*11@Ext
 }
|
* is locking onto empty space.^msplay General\Misc\Cancel~@Ext
|
I have completed the repair of *.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 msplay Ship\Computer\RepairComplete~@Ext;
 ExpPipe {~@ComputerSaid} {Completed the repair of ~@Wildcard1.} {~@Wildcard1 repaired.}
|
I am beginning the repair of *. Estimated time to completion: *.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 msplay Ship\Computer\RepairStart@Ext;
 ExpPipe {~@ComputerSaid} {Repairing ~@Wildcard1. ~@Wildcard2 until complete.} {Repairing ~@Wildcard1 (~@Wildcard2).}
|
* will be completely repaired in approximately *.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 ExpPipe {~@ComputerSaid} {~@Wildcard1 will be repaired in approximately ~@Wildcard2.} {~@Wildcard1 will be repaired in ~@Wildcard2.}
|
Turret* locking onto *.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 #If {~@UseAlternativeCombatSounds=1 AND ~%Pos(Praelor,~@Wildcard2)>0} {
  msplay Ship\Combat\FireAtPraelor~@Ext
 };
 #If {~%Replace(~@Wildcard2,~~",)="empty space"} {
  msplay General\Misc\Cancel@Ext;
  ExpPipe {~@ComputerSaid} {Turret@Wildcard1 locking on nothing} {Nothing targeted.}
 } {
  #If {~@ExtraFiringSound=1 and ~@Wildcard2<>"Debris"} {msplay Ship\Combat\WeaponsLocked~@Ext};
  msplay Ship\Computer\Keyboard*15~@Ext
 }
|
Bardenium Cannon* locked on *. Firing.^
 GetWildcardValues {~@ComputerAction} {~@ComputerSaid};
 #If {~@UseAlternativeCombatSounds=1 AND ~%Pos(Praelor,~@Wildcard2)>0} {
  msplay Ship\Combat\FireAtPraelor~@Ext
 };
 #If {@ExtraFiringSound=1} {msplay Ship\Combat\WeaponsLocked~@Ext};
 msplay Ship\Computer\Keyboard*15~@Ext;
 ExpPipe {~@ComputerSaid} {Bardenium Cannon~@Wildcard1 locked on ~@Wildcard2.} {Cannon~@Wildcard1 locked on ~@Wildcard2.};
 #If {~%Defined(CannonsSalvoSize)=1} {
  #Math CannonsAvailableBard {~@CannonsAvailableBard-~@CannonsSalvoSize};
  #If {~@CannonsAvailableBard<=0} {msplay Ship\Combat\NoBard~@Ext}
 }
|
Hit on * "*"*.^
 #If {~@SomeoneElseFires<>1} {
  #math DirectHits {~@DirectHits + 1}
 };
 #Var SomeoneElseFires 0;
 #Var TmpComputer1 {~%replace(~@ComputerAction,~~", )};
 #Var TmpComputer2 {~%replace(~@ComputerSaid,~~", )};
 GetWildcardValues {~%replace(~@TmpComputer1,  , )} {~%replace(~@TmpComputer2,  , )};
 mwplay Ship\Combat\OtherHit5@Ext;
 ExpPipe {~@ComputerSaid} {Hit on ~@Wildcard1 ~@Wildcard2~@Wildcard3.} {Hit on ~@Wildcard2~@Wildcard3.}
|
Partial hit on * "*"*.^
 #If {~@SomeoneElseFires<>1} {
  #Math PartialHits {~@PartialHits + 1}
 };
 #Var Tmp1 {~%replace(~@ComputerAction,~~", )};
 #Var Tmp2 {~%replace(~@ComputerSaid,~~", )};
 GetWildcardValues {~%replace(~@Tmp1,  , )} {~%replace(~@Tmp2,  , )};
 mwplay Ship\Combat\OtherHit*5@Ext;
 msplay Ship\Combat\PartialHit@Ext 20;
 ExpPipe {~@ComputerSaid} {Partial hit on ~@Wildcard1 ~@Wildcard2~@Wildcard3.} {Partial hit on ~@Wildcard2~@Wildcard3.}
|
* been detected in the sector.^mobject {~@ComputerSaid}
|
The game has ended! The winner is *^
 mrplay;
 msplay Music\*30@Ext
}

#Trigger {* announces, *} {
 #If {%Pos(:,%1)=0 and %Pos(~, ~",%1)=0 and %IfWord(%Left(%0,1),>| |#|-|[|~(,|)=0} {
  #If {%Pos( flickers ,%1)>0} {#Var ComputerName {%Copy(%1,1,%Pos( flickers ,%1)-1)}} {#Var ComputerName {Computer}};
  #Var ComputerSaid {%Replace(%2,~",)};
  #If {%Pos(Control room reports: ,@ComputerSaid)=1} {
   #Var ComputerSaid {%Copy(@ComputerSaid,23)};
   msplay Ship\Computer\LFD@Ext
  } {
   msplay Ship\Computer\Announce*4@Ext
  };
  #Var ComputerTmp1 {%CRLF@ComputerSaid^};
  #Var ComputerTmp1 {%Pos(@ComputerTmp1,@ComputerActions)};
  #Var ComputerCommands {};
  #If {@ComputerTmp1>0} {
   #Var ComputerTmp1 {%Copy(@ComputerActions,@ComputerTmp1+%Length(@ComputerSaid)+3)};
   #Var ComputerCommands {%Word(@ComputerTmp1,%CRLF|%CRLF,1)}
  } {
   #ForAll {@ComputerActionsW} {
    #If {%Length(@ComputerCommands)=0 and %Pos(%CRLF,%i)=1} {
     #Var ComputerAction {%Copy(%Word(%i,^,1),3)};
     #If {@ComputerSaid=*%Replace(@ComputerAction,~",)} {#Var ComputerCommands {%Word(%i,^,2)}}
    }
   }
  };
  #Var ExpString {@ComputerSaid};
  #If {%Length(@ComputerCommands)>0} {#Exec {@ComputerCommands}};
  #If {@GagAvatars=0 and (@ExperienceLevel<3 or @ComputerName<>"Computer")} {#Var ExpString {@ComputerName: @ExpString}};
  PushMessage Computer {@ExpString};
  #If {@SpeakComputerMessagesThroughSAPI=1 AND @ComputerSpoken<>1} {
   SSpeak @ExpString;
   #GagLine 1 Voice
  };
  #Sub {@ExpString}
 }
} {Main}

#Trigger {The computer reports *} {
 #Var ExpString {};
 #Var ShipComputerTmp1 {%Replace(%1,~",)};
 #Var ShipComputerTmp2 {Ship\Computer\Report*4@Ext};
 #If {@ShipComputerTmp1="no nearby debris."} {
  #Var ShipComputerTmp2 {Ship\Computer\NoNearbyDebris@Ext};
  ExpPipe {%0} {:Voice:%Proper(%1)} {}
 };
 #If {@ShipComputerTmp1=*"* is one unit away from this ship."} {
  #Var ShipComputerTmp2 {Ship\Computer\OneUnitAway@Ext};
  ExpPipe {%0} {%1} {%Copy(%1,1,%Pos(is one unit away from this ship.%CRLF,%1%CRLF))n range.}
 };
 #If {@ShipComputerTmp1=*"* has been destroyed."} {
  #Math TotalShips {@TotalShips + 1};
  mwplay Ship\Combat\OtherDestroyed*11@Ext;
  ExpPipe {%0} {%0} {%Copy(%1,6,%Eval(%Length(%1)-25)) destroyed.}
 };
 #If {@ShipComputerTmp1=*"the starship is headed for *. The computer estimates approximately * until arrival at the destination at sublight speeds."} {
  #Var ShipComputerTmp3 {%Pos(. The computer estimates approximately ,%1)};
  #Var ShipComputerTmp4 {%Copy(%1,28,%Eval(@ShipComputerTmp3-28))};
  #Var ShipComputerTmp5 {%Delete(%1,1,%Eval(@ShipComputerTmp3+38))};
  #Var ShipComputerTmp5 {%Copy(@ShipComputerTmp5,1,%Eval(%Pos(until arrival at the destination at sublight speeds,@ShipComputerTmp5)-2))};
  ExpPipe {%0} {%0} {@ShipComputerTmp5 until arrival at @ShipComputerTmp4.};
  #ForAll {Tmp3|Tmp4|Tmp5} {#UnVar {ShipComputer%i}}
 };
 #If {%Length(@ShipComputerTmp2)>0} {
  #If {%NumWords(@ShipComputerTmp2,|)>1} {
   MirianiSoundPlay Computer {%Word(@ShipComputerTmp2,|,1)} {%Word(@ShipComputerTmp2,|,2)}
  } {
   MirianiSoundPlay Computer {%Word(@ShipComputerTmp2,|,1)}
  }
 };
 #If {%Length(@ExpString)=0} {
  #If {%Word(@ShipComputerTmp1, ,1)="that"} {#Var ShipComputerTmp1 {%Delete(%1,1,5)}} {#Var ShipComputerTmp1 {%1}};
  ExpPipe {%0} {%0} {%Proper(@ShipComputerTmp1)}
 };
 #Sub {@ExpString};
 #UnVar ShipComputerTmp1;
 #UnVar ShipComputerTmp2
} {Main|Starship}
#Trigger {* presses a button on a navigation console and examines the display.} {msplay Ship\Computer\Keyboard*15@Ext;
ExpPipe {%0} {%0} {%1 checks the navigation console.};
#sub {@ExpString}} {Main|Starship}
#Trigger {A destination appears on the ship's navigation controls: *} {
 msplay Ship\Computer\Keyboard*15@Ext;
 ExpPipe {%0} {Heading to %1} {Destination: %1};
 #Sub {@ExpString}
} {Main|Starship}
#Trigger {There are no damaged components.} {
 msplay Ship\Computer\Display@Ext;
 MainTrigSwitch 1
} {Main}
#Trigger {Charge Readout:} {msplay Ship\Computer\Display@Ext} {Main}
#Trigger {Total Weight: *} {msplay Ship\Computer\Display@Ext} {Main}
#Trigger {There is nothing in the cargo hold.*} {msplay Ship\Computer\Display@Ext} {Main|Craft}
#Trigger {Starship *} {
 #If {%IfWord(%1,Security Status:|Status:|Weapon Configuration:|Weapon Information,|)=1} {
  msplay Ship\Computer\Display@Ext;#Abort
 }
} {Main|Starship}
#Trigger {* Damage:} {
 ExpPipe {%0} {:Voice:%0} {:Voice:%0};
 #Sub {@ExpString};
 msplay Ship\Computer\Display@Ext
} {Main}
#Trigger {Weapon Status:} {msplay Ship\Computer\Display@Ext} {Main|Starship}
#Trigger {Current coordinates: *} {
 #Var MyCoordsX {%Word(%1,~, ,1)};
 #Var MyCoordsY {%Word(%1,~, ,2)};
 #Var MyCoordsZ {%Word(%1,~, ,3)};
 #If {@InterruptOnFocus=1} {speech stop};
 #If {@currentroomsound="Ship\Rooms\Salvager.wav"} {
  ExpPipe {%0} {%1} {@MyCoordsX @MyCoordsY}
 } {
  ExpPipe {%0} {%1} {@MyCoordsX @MyCoordsY @MyCoordsZ}
 };
 #sub {@ExpString};
 #class AtSaStarmap disable
} {Main}
#Trigger {A * beep sounds as the computer announces* "* charge remaining."} {msplay Ship\Computer\LowCharge*3@Ext;
ExpPipe {%0} {[Alert]: %3 charge remaining!} {%3 charge remaining!};
#sub {@ExpString}} {Main}
#Trigger {The starship is at * status.} {
 #If {%1 = "red" AND @Peers <> 1} {
  #If {@ThemeSoundHandle = 0} {
   mtplay
  }
 } {
  thememusicfadeout
 }
} {Main|Starship}
#Trigger {* Lights overhead indicate that the ship is on * status. *} {
 #If {%2 = "red alert"} {
  #If {%Mp3Loop=0} {
   mtplay
  }
 } {
  thememusicfadeout
 }
} {Main|Starship}
#Trigger {A computerized voice on * announces, "*"} {msplay Ship\Computer\LFD@Ext} {Main}
#Trigger {A * suddenly emerges from a console.} {msplay Ship\Computer\ScanRetrieved@Ext} {Main|Starship}
#Trigger {Video probe history:} {ExpPipe {%0} {%0} {};
#sub {@ExpString};
msplay Ship\Computer\Probe*3@Ext} {Main}
#Trigger {Scanning is made much more difficult by the lack of sensors.} {
 #class focus disable;
 msplay Ship\Computer\Error@Ext
} {Main|Starship}
#Trigger {* is unable to function without sensors.} {msplay Ship\Computer\Error@Ext} {Main|Starship}
#Trigger {There is * that prevents movement.} {msplay Ship\Computer\Error@Ext} {Main}
#Trigger {Control room computer announcements will now be *.} {#If {%1 = "announced ship-wide"} {
msplay Ship\Computer\PipeOn@Ext
} {
msplay Ship\Computer\PipeOff@Ext
}} {Main|Starship}
#Trigger {* emerges from a nearby console.} {msplay Ship\Computer\ScanRetrieved@Ext} {Main|Starship}
#Trigger {The * cannot function without operational sensors.} {msplay Ship\Computer\Error@Ext} {Main|Starship}
#Trigger {Alert: Sensor interference detected.} {ExpPipe {%0} {Sensor interference detected.} {};
#sub @ExpString;
msplay Ship\Computer\SensorInterference@Ext} {Main|Starship}
#Trigger {* voice comes over the intercom, announcing, *} {
 msplay Ship\Computer\Announce*4@Ext;
 ExpPipe {%0} {[%1]: %2} {%2};
 #Sub {@ExpString};
 PushMessage Computer {@ExpString};
} {Main|Starship}
