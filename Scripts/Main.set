#If {%IsNumber(%Version)=0} {
 #Say {WARNING! You seem to be running VIP Mud 1.1, and therefore you'll need to install the 1.1 compatible version of this soundpack.}
}
#If {%Defined(Connected)=0} {#Var Connected 0}
#Var GagEverything 0
#Var Idle 0
#Var LoadedSoundpackVersion {}

#PC 0 Stop
#Class Main Enable
#Class MainOff Disable
#Var Main 1
#If {%Defined(IgnoredScriptFiles)=0} {#Var IgnoredScriptFiles {}}

#Var DefaultScriptFiles {
ShipComputer|
ACV|
Airlock|
Archaeology|
Asteroid|
Atsm|
CameraFeed|
Combat|
Communication|
Devices|
Display|
History|
ITPN|
KeyStrokes|
LaserTag|
Lift|
Lore|
MessageBoard|
Misc|
PMining|
Rooms|
Scanning|
Scooping|
ShipCombat|
ShipMisc|
ShipMovement|
SmFilter|
Socials|
SoundpackML|
YouActions|
YouActionsW|
Extras|
ConfManagerMenus|
}

; VIP Mud config overrides:
#Conf ScriptReadOnly True
#Conf AutoSave False
#Conf Explicit False

#GAlias login {
 #If {%Defined(Main)=0} {
  #Exec {%charInfo(name);%charInfo(password)}
 } {
  #Var AutoLogin 1
 }
}

#Trigger {Welcome to*} {
 #If {%IfWord(%1,...| Miriani!,|)=1} {
  #Var Connected 0;
  #If {%1="..."} {
   #Say {Welcome to Miriani!};
   #GagLine 8 All
  };
  #Alarm 0 {
   #Load {@ScriptPath\Const.set};
   #Load {@SoundsPath\Main.set};
   #Class LoggingIn Enable;
   #Alarm 0 {SPLoad1 1}
  }
 }
} {Main}
#Alias SPLoad1 {
 #Var LoadTmp1 {%1};
 #Alarm 0 {
  #If {@LoadTmp1<>1} {
   #Load {@ScriptPath\Const.set};
   #Load {@SoundsPath\Main.set};
   #If {%CharInfo(Connected)=1} {#Var Connected 1}
  };
  #If {%Defined(PreservedVariables)=0} {
   #Load {@ScriptPath\Variables.set};
   #Load {%MudName\Variables.set}
  };
  #If {%Defined(ConfOptionVars)=0} {#Load {@ScriptPath\ConfManager.set}};
  #If {@PassThru=1} {#Conf ExpandCommandLineVars False};
  #Conf DisplayCommandsInOutput False;
  #If {@LoadTmp1=1} {
   #Exec {>register_soundpack @SoundpackName | @Version};
   #If {@AutoLogin=1} {#Exec {%CharInfo(Name);%CharInfo(Password)}}
  };
  #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True};
  #If {%Defined(SoundIsPlaying)=0} {#Load {@ScriptPath\SoundEngine.set}};
  #If {@LoadTmp1=1 and @PlayStartupMusic=1} {
   MirianiSoundPlay {Startup Music} {Music\*63@Ext};
   #If {@SoundIsPlaying=1} {#Var StartupMusicHandle %PlayHandle}
  };
  #If {@LoadTmp1<>1} {SPLoad2 {@LoadTmp1}}
 }
} {}
#Trigger {Input your selection:} {
 #Class LoggingIn Disable;
 #Alarm 0 {SPLoad2 1}
} {Main|LoggingIn}
#Alias SPLoad2 {
 #Var LoadTmp2 {%1};
 #If {%Replace(@LoadedSoundpackVersion,.,)<>%Replace(@Version,.,)} {
  #Alarm 0 {
   #ForAll {%Replace(@DefaultScriptFiles,%CRLF,)} {
    #If {%Length(%i)>0 and %IfWord(%i,@IgnoredScriptFiles,|)=0} {#Load {@ScriptPath\%i.set}}
   };
   #Load {%MudName\Custom.set};
   Speech Set {@DefaultSpeechType} 1;
   #If {@AlertOnUpdate=1 and @RequiredSoundsVersion>@SoundsVersion} {
    #Say {Warning: You are not using the latest version of the Miriani Soundpack Sounds. Certain sounds might not work until you upgrade to the most recent sounds folder.};
    msplay {General\Misc\MOTD@Ext}
   };
   msplay Ship\Computer\Beep@Ext;
   #If {@LoadTmp2=0} {
    #Ignore Key Off;
    #Ignore Trigger Off;
    #If {@RoomSounds=1 and %Defined(InSpace)=1 and %Defined(RoomSound)=1 and %Defined(ZoneType)=1} {
     #If {(@InSpace=1 or %Pos(Pool,@RoomName)>0) or @ZoneType<>"starship"} {
      mrplay @RoomSound Frequency 44100
     } {
      mrplay @RoomSound Frequency 22050
     }
    };
    SPKeepAlive Start Quiet;
    #Say {Reloading complete. Please look in the room with your character so that the soundpack will know the current environment.}
   };
   #Var LoadedSoundpackVersion {@Version}
  }
 } {
  msplay Ship\Computer\Beep@Ext
 }
} {}
#Trigger {[*][*][*] * [*][*][*]} {
 #Var MainTmp1 {%Replace(%1,~",)};
 #If {@MainTmp1="Connected"} {
  #GagLine 1 Voice;
  SPConnect 1;
  #Alarm 2 {SPKeepAlive Start Quiet};
  #Abort
 };
 #If {@MainTmp1="Disconnected"} {
  mrplay stop;
  #Var Connected 0;
  #PC 0 Stop;
  #If {@AutoSave=1} {ConfSaveAll Quiet};
  #Abort
 };
 #If {@MainTmp1="Redirecting old connection to this port"} {
  #GagLine 1 Voice;
  #Say {Reconnected} NoDisplay;
  #PC 0 Stop;
  #UnAlarm -1;
  SPConnect 1;
  l;
  #Abort
 };
 #If {@MainTmp1=*"The server will be shut down *"} {
  msplay General\Misc\Announcement@Ext;
  #Abort
 }
} {Main}

#Alias ping {
 #Var ShowPong {};
 #Var ShowPingPongLagReport {};
 #Conf DisplayCommandsInOutput False;
 #Exec {>#$#soundpack_ping};
 #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
} {}
#Trigger {[#]$[#]*} {
 #Conf DisplayCommandsInOutput False;
 #GagLine 1 All;
 #Var oobTmp1 {%Replace(%1,~",)};
 #Var oobTmp1 {%Replace(@oobTmp1,~~,)};
 #If {%Defined(KeepAliveState)=1} {#Var KeepAliveState 1};
 #If {@oobTmp1="soundpack_pong"} {
  #If {%Defined(WhoOriginalHeader)=1} {
   WhoCheck {} {ReadingComplete};
   #UnGagLine;
   #Sub {%Delete(@WhoData,1,2)};
   #UnVar WhoData
  } {
   #Exec {>#$#soundpack_ping_reply ms};
   #If {%Defined(ShowPong)=1} {
    #UnGagLine;
    #Sub {Pong!};
    #UnVar ShowPong
   }
  }
 };
 #If {@oobTmp1="hjelp"} {
  #If {@KeepAliveRespond=1 or @KeepAlive>0} {
   #Exec {>#$#soundpack_ping_reply ms}
  };
  SPKeepAlive Start Quiet Replied;
  #If {@SaveOnIdle=1} {
   #Exec {#Alarm 0 {ConfSaveAll {%If(@GagSaveOnIdle=1,Quiet,)}}}
  }
 };
 #If {@oobTmp1=*"soundpack_lag *"} {
  #If {%Defined(ShowPingPongLagReport)=1} {
   #Var ShowPingPongLagReport {%Word(%1, ,2)};
   #Var ShowPingPongLagReport {%Word(@ShowPingPongLagReport,.,1)};
   #UnGagLine;
   #Sub {You have @ShowPingPongLagReport ms of local client lag.};
   #UnVar ShowPingPongLagReport
  }
 };
 #If {@oobTmp1=*"soundpack echo | *"} {
  #If {%Defined(SPPromptAwaitingUserInput)=1} {
   #If {@SPPromptAcceptBlankUserInput=1 or %Length(%1)>17} {
    #Exec {#Alarm 0 {SPPrompt Disable;@SPPromptCallback {%Copy(%1,18,%Eval(%Length(%1)-17))} {@SPPromptCallbackLastArg}}}
   } {
    msplay General\Misc\Cancel@Ext;
    #Say {Aborted.} NoVoice;
    SPPrompt Disable
   }
  } {
   msplay General\Misc\Cancel@Ext
  }
 };
 #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
} {}
#Alias SPKeepAlive {
 #If {%IsNumber(%1)=1} {
  #If {%1>0} {
   #Var KeepAlive %1;
   #If {%2<>"Quiet"} {#Say {SPKeepAlive is now set to %1 seconds.}};
   SPKeepAlive Start Quiet
  } {
   #Var KeepAlive 0;
   #If {%Defined(KeepAliveState)=1} {#UnVar KeepAliveState};
   #If {%Defined(KeepAliveHandle)=1} {#UnAlarm KeepAliveHandle;#UnVar KeepAliveHandle};
   #If {%2<>"Quiet"} {#Say {SPKeepAlive is now off.}}
  }
 } {
  #If {%1="Start"} {
   #If {@KeepAlive>0} {
    #If {%2<>"Quiet"} {
     #If {%Defined(KeepAliveHandle)=1} {
      #Say {SPKeepAlive restarted.}
     } {
      #Say {SPKeepAlive started.}
     }
    };
    #If {@KeepAlive<10} {
     #Say {Automatically adjusting your SPKeepAlive to 10 seconds, because @KeepAlive is just too short.};
     #Var KeepAlive 10
    };
    #If {%3<>"Replied"} {
     #Var KeepAliveState 0;
     #Conf DisplayCommandsInOutput False;
     #Exec {>#$#soundpack_ping};
     #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
    };
    #If {%Defined(KeepAliveHandle)=1} {#UnAlarm KeepAliveHandle};
    #Alarm KeepAliveHandle {@KeepAlive} {
     #UnVar KeepAliveHandle;
     #If {@KeepAliveState=0} {
      #Var KeepAliveState 3;
      #Say {WARNING: The soundpack reports that your connection to the server might be broken!};
      #Say {You can change the soundpack's keep alive settings by typing SPKeepAlive.};
      msplay {LaserTag/NoTargets@Ext}
     } {
      SPKeepAlive Start Quiet
     }
    }
   } {
    #If {%2<>"Quiet"} {
     #Say {First you need to give SPKeepAlive an interval to work with. Please type SPKeepAlive for more information.}
    }
   }
  } {
   #If {@KeepAlive>0} {
    #Say {SPKeepAlive is currently set to @KeepAlive seconds.}
   } {
    #Say {SPKeepAlive is currently off.}
   };
   #Say {You can set the interval of SPKeepAlive by giving it a new amount of seconds, e.g.: SPKeepAlive 90. That would set the interval to one and a half minute.};
   #Say {To turn SPKeepAlive off, set it to 0 seconds.}
  }
 }
} {}

#Alias {aboutscripts} {speech stop;
ConfPrint {@{SoundpackName}, version @{version}.
Originally written by Cory Martin.
Rewritten, updated, and maintained by @SoundpackCreators.
  Credits:
@SoundpackContributors
  Contact information:
Please use the OOC / Soundpacks board in Miriani for questions and stuffs.
}} {}
#key shift-f1 {aboutscripts} {}

#Alias MainTrigSwitch {
 #If {%Length(%2)>0} {
  #If {%Defined(ActiveClasses)=0} {#Var ActiveClasses {%2}} {#AddItem ActiveClasses {%2} NoDuplicates}
 };
 #If {%1>0} {
  #If {%Defined(ActiveClasses)=1} {
   #ForAll {@ActiveClasses} {
    #Class {%i} Disable;
    #Exec {#UnVar {%i}}
   };
   #UnVar ActiveClasses
  };
  #Var Main %1;
  #Class Main Enable;
  #Class MainOff Disable
 } {
  #If {%Length(%2)>0} {
   #ForAll {%2} {
    #Class {%i} Enable;
    #Var {%i} {%1}
   }
  };
  #If {%1<0} {#Class Main Disable;#Class MainOff Enable;#Var Main %1}
 }
}
#Alias GetWildcardValues {
 #Var WildcardTmp1 0;
 #Math WildcardTmp2 {%NumWords(%1,*)-1};
 #Var WildcardTmp3 {%2};
 #While {@WildcardTmp1<@WildcardTmp2} {
  #Math WildcardTmp1 {@WildcardTmp1+1};
  #Var WildcardTmp4 {%Word(%1,*,@WildcardTmp1)};
  #Var WildcardTmp5 {%Word(%1,*,%Eval(@WildcardTmp1+1))};
  #Math WildcardTmp6 {%Pos(%CRLF,@WildcardTmp4%CRLF)-1};
  #Var {Wildcard@WildcardTmp1} {%Delete(@WildcardTmp3,1,@WildcardTmp6)};
  #If {@WildcardTmp5<>""} {
   #Math WildcardTmp7 {%Pos(@WildcardTmp5,@{Wildcard@WildcardTmp1})-1};
   #If {@WildcardTmp7<0} {
    #Var WildcardTmp7 0;
    #Var {Wildcard@WildcardTmp1} {}
   } {
    #Var {Wildcard@WildcardTmp1} {%Copy(@{Wildcard@WildcardTmp1},1,@WildcardTmp7)}
   }
  } {
   #Math WildcardTmp7 {%Pos(%CRLF,@{Wildcard@WildcardTmp1}%CRLF)-1};
   #If {@WildcardTmp7<0} {
    #Var WildcardTmp7 0
   }
  };
  #Var WildcardTmp3 {%Delete(@WildcardTmp3,1,%Eval(@WildcardTmp6+@WildcardTmp7))}
 }
} {}
#Alias ExpPipe {
 #Var ExpString {%Trim(%{@ExperienceLevel})};
 #If {%Replace(%Left(@ExpString,1),~",)=":"} {
  #If {%NumWords(@ExpString,:)>2} {
   #Math ExpGagLines {%Pos(:,%Delete(@ExpString,1,1))+1};
   #Var ExpGagType {%Copy(@ExpString,2,%Eval(@ExpGagLines-2))};
   #Var ExpString {%Delete(@ExpString,1,@ExpGagLines)}
  } {
   #Var ExpGagType {%Delete(@ExpString,1,1)};
   #Var ExpString {}
  };
  #If {%NumWords(@ExpGagType, )=2} {
   #Var ExpGagLines {%Word(@ExpGagType, ,1)};
   #Var ExpGagType {%Word(@ExpGagType, ,2)}
  } {
   #If {%IsNumber(@ExpGagType)} {
    #Var ExpGagLines @ExpGagType;
    #Var ExpGagType {All}
   } {
    #Var ExpGagLines 1
   }
  }
 } {
  #Var ExpGagLines -1
 };
 #If {%Replace(@ExpString,~",Q)=""} {
  #Var ExpString { };
  #If {@ExpGagLines=-1} {
   #Var ExpGagLines 1;
   #Var ExpGagType {All}
  }
 };
 #If {@ExpGagLines>0} {
  #GagLine @ExpGagLines @ExpGagType
 }
} {}


#Alias {wn} {#edit @ChangelogFilePath} {}
#Alias GagEverything {
 #Var GagEverything {%Eval(NOT @GagEverything)};
 #If {@GagEverything=1} {
  #SetSpeech Incoming Off;
  #Say {Gagging enabled. Type GagEverything, or press control f12 to disable.} VoiceOnly
 } {
  #SetSpeech Incoming On;
  #Say {Gagging Disabled.}
 }
} {}
#Alias SPConnect {
 #Var Connected 1;
 #If {%1="1"} {
  #If {%Defined(StartupMusicHandle)=1} {
   #PC @StartupMusicHandle Stop;
   #UnVar StartupMusicHandle
  }
 };
 soundpack register
} {}
#Alias SPCommand {
 #Exec {>#$#soundpack_status commands:%Trim(%0)};
 #Exec {%Trim(%0)}
} {}
#Alias SPInfo {
 #If {%IsNumber(%Version)=0} {
  #Say {Warning: You have installed the scripts for VIP Mud 2.0, but you are using VIP Mud 1.1. It is likely that errors will occur unless you install the scripts for VIP Mud 1.1, or upgrade to VIP Mud 2.0.}
 };
 #If {@RequiredSoundsVersion>@SoundsVersion} {
  #Say {Warning: You are not using the most recent Miriani Soundpack Sounds. Certain sounds might not work until you upgrade to version @RequiredSoundsVersion of the sounds folder.}
 };
 #Say {Soundpack version: @Version};
 #If {%IsNumber(%Version)=0} {
  #Say {VIP Mud version: 1.1}
 } {
  #If {%Length(%Version)=6} {
   #Var VipTmp1 {%Left(%Version,1)};
   #If {%Copy(%Version,2,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,2,1)}};
   #Var VipTmp1 {@VipTmp1.%Copy(%Version,3,1)};
   #If {%Copy(%Version,4,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,4,1)}};
   #Var VipTmp1 {@VipTmp1.%Copy(%Version,5,1)};
   #If {%Copy(%Version,6,1)<>"0"} {#Var VipTmp1 {@VipTmp1%Copy(%Version,6,1)}};
   #Say {VIP Mud version: @VipTmp1};
   #UnVar VipTmp1
  } {
   #Say {VIP Mud version: %Version}
  }
 };
 #Say {Sounds version: @SoundsVersion};
 #Say {Scripts path: @ScriptPath};
 #Say {Sounds path: @SoundsPath};
 #Say {Themes path: @ThemesPath}
} {}
#Alias SPTest {
 #Var TestTmp1 {Soundpack Test:};
 #If {%Defined(Version)=1} {
  #Var TestTmp1 {@TestTmp1%{CRLF}+ Soundpack version seems to be @Version.}
 } {
  #Var TestTmp1 {@TestTmp1%{CRLF}- Soundpack version is missing. Try type SPRELOAD to fix this.}
 };
 #If {%Defined(DecimalChar)=1 and %Defined(LoadedSoundpackVersion)=1 and %Defined(Connected)=1 and %Defined(GagEverything)=1 and %Defined(DefaultScriptFiles)=1} {
  #Var TestTmp1 {@TestTmp1%{CRLF}+ Main.set variables seems to be loaded.};
  #If {%Defined(LoadTmp1)=1} {
   #Var TestTmp1 {@TestTmp1%{CRLF}+ First loadcode exists, and is currently set to @LoadTmp1.}
  } {
   #Var TestTmp1 {@TestTmp1%{CRLF}- First loadcode missing. Try type SPRELOAD to fix this.}
  };
  #If {%Defined(LoadTmp2)=1} {
   #Var TestTmp1 {@TestTmp1%{CRLF}+ Second loadcode exists, and is currently set to @LoadTmp2.}
  } {
   #Var TestTmp1 {@TestTmp1%{CRLF}- Second loadcode missing. Try type SPRELOAD to fix this.}
  };
  #If {%Replace(@LoadedSoundpackVersion,.,) = %Replace(@Version,.,)} {
   #Var TestTmp1 {@TestTmp1%{CRLF}+ Scripts for your soundpack version have been loaded according to the version checker.}
  } {
   #Var TestTmp1 {@TestTmp1%{CRLF}- Scripts for your soundpack version have not been loaded according to the version checker. Try type SPRELOAD to fix this.}
  };
  #If {%Defined(DeclaredVariables)=1 and %Defined(PreservedVariables)=1} {
   #Var TestTmp1 {@TestTmp1%{CRLF}+ The Variables framework seems to be loaded.}
  } {
   #Var TestTmp1 {@TestTmp1%{CRLF}- The Variables framework does not seem to have been loaded. Try type SPRELOAD to fix this.}
  }
 } {
  #Var TestTmp1 {@TestTmp1%{CRLF}- Main.set variables missing. Aborting the test.}
 };
 #Var TestTmp2 {%{CRLF}-};
 #If {%Pos(@TestTmp2,@TestTmp1)>0} {
  #Var TestTmp1 {@TestTmp1%CRLF  The testing tool detected one or more issues with the soundpack.}
 } {
  #Var TestTmp1 {@TestTmp1%CRLF  The testing tool could not find any issues with the soundpack.}
 };
 #If {%1="copy"} {
  #Clip {@TestTmp1};
  #Say {Soundpack test report has hopefully been copied to the clipboard.}
 } {
  #Say {@TestTmp1}
 };
 #UnVar TestTmp1;
 #UnVar TestTmp2
} {}
#Alias SPReload {
 #If {%1<>"1"} {#Say {Reloading}};
 #Ignore Key On;
 #Ignore Trigger On;
 #PC 0 Stop;
 #UnAlarm -1;
 #If {@AutoSave=1} {ConfSaveAll Quiet};
 #Alarm 0 {
  #Exec {
   #Reload;
   #Var CharacterName {@CharacterName};
   #Var Classification {@Classification};
   #Var Connected {@Connected};
   #Var Exits {@Exits};
   #Var Hostile {@Hostile};
   #Var InSpace {@InSpace};
   #Var Light {@Light};
   #Var HistoryLogBuffer {@HistoryLogBuffer};
   #Var HistoryLogInitialization {@HistoryLogInitialization};
   #Var RoomName {@RoomName};
   #Var RoomSound {@RoomSound};
   #Var Powered {@Powered};
   #Var ZoneName {@ZoneName};
   #Var ZoneType {@ZoneType};
   SPLoad1 0
  }
 }
}
#Key {Control-S} {
 #SetSpeech incoming stop;
 ConfSaveAll
} {}
#Trigger {[[]*] Connect as *.} {
 #Var CharacterName %2;
 #If {@BypassLoginMenu=1} {
  #Exec {1}
 };
 #If {%IfWord(@CharacterName,@BlacklistedPlayers,|)=1} {
  #Class Main Disable
 }
} {Main}

#Alias SPPrompt {
 #If {%Length(%3)=0} {
  #If {%Replace(%1,~",)="Disable"} {
   #UnVar SPPromptCaption;
   #UnVar SPPromptOptions;
   #UnVar SPPromptCallback;
   #UnVar SPPromptCallbackLastArg;
   #UnVar SPPromptAwaitingUserInput;
   #UnVar SPPromptAcceptBlankUserInput;
   #Class ShowSPPrompt Disable
  } {
   #Exec {>SPPrompt%RTrim( %0)}
  }
 } {
  #Var SPPromptCaption {%1};
  #If {%Length(@SPPromptCaption)>0} {
   #If {%IfWord(%Right(@SPPromptCaption,1),. : ! ?, )=0} {#Var SPPromptCaption {@SPPromptCaption:}};
   #Say {@SPPromptCaption} NoDisplay
  };
  #If {%Right(%2,2)=%CRLF} {#Var SPPromptOptions {%Copy(%2,1,%Eval(%Length(%2)-2))}} {#Var SPPromptOptions {%2}};
  #If {%Left(@SPPromptOptions,2)=%CRLF} {#Var SPPromptOptions {%Copy(@SPPromptOptions,3,%Eval(%Length(@SPPromptOptions)-2))}};
  #If {%Pos(:,%3)=1} {
   #Var SPPromptAcceptBlankUserInput 1;
   #Var SPPromptCallback {%Copy(%3,2,%Eval(%Length(%3)-1))}
  } {
   #Var SPPromptAcceptBlankUserInput 0;
   #Var SPPromptCallback {%3}
  };
  #Var SPPromptCallbackLastArg {%4};
  #UnVar SPPromptTmp1;
  #UnVar SPPromptAwaitingUserInput;
  #Class ShowSPPrompt Enable;
  #Conf DisplayCommandsInOutput False;
  #Exec { };
  #Exec {>secho};
  #If {@CommandEcho=1} {#Conf DisplayCommandsInOutput True}
 }
} {}
#Trigger {What would you like to be repeated back to you using soundpack echo?} {
 #Class ShowSPPrompt Disable;
 #If {%Defined(SPPromptCaption)=0} {
  SPPrompt Disable
 } {
  #Var SPPromptAwaitingUserInput 1;
  #If {%Length(@SPPromptOptions)>0} {
   #If {%Length(@SPPromptCaption)>0} {#Say {  @SPPromptCaption} NoVoice};
   #Sub {@SPPromptOptions}
  } {
   #GagLine 1 Voice;
   #Sub {@SPPromptCaption}
  }
 }
} {ShowSPPrompt}
